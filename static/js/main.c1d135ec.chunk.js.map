{"version":3,"sources":["reportWebVitals.js","TopTab.js","Task.js","TaskList.js","BottomTab.js","AddPopUp.js","App.js","InMemoryApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TopTab","props","id","appMode","AppModes","EDIT_MODE","onClick","setAppMode","DEFAULT_MODE","disabled","existsTasks","ADD_MODE","Task","className","type","checked","task","isChecked","value","taskName","onChange","e","onTaskChanged","target","onTasksDeleted","TaskList","tasks","data","filter","tasksShowing","TasksShowing","ALL","UNCOMPLETED","length","map","BottomTab","useState","idsToBeDeleted","setIDsToBeDeleted","setTasksShowing","AddPopUp","setValue","preventDefault","onItemAdded","App","taskIDs","setData","includes","concat","generateUniqueID","taskID","field","newValue","InMemoryApp","initialData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1d135ec.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './TopTab.css'\nimport {AppModes} from \"./App\";\n\nfunction TopTab(props) {\n    return <div id=\"topTab\">\n        {\n            props.appMode === AppModes.EDIT_MODE ?\n            <button\n                id=\"saveEdits\"\n                onClick={() => props.setAppMode(AppModes.DEFAULT_MODE)}\n            >Done</button>\n            :<button\n                    id=\"editButton\"\n                    disabled={!props.existsTasks}\n                    onClick={() => props.setAppMode(AppModes.EDIT_MODE)}\n                >Edit</button>\n        }\n        <h1 id =\"title\">To-Do</h1>\n        <button id=\"addItem\"\n                disabled={props.appMode !== AppModes.DEFAULT_MODE}\n                onClick={() => props.setAppMode(AppModes.ADD_MODE)}\n        >+</button>\n    </div>\n}\nexport default TopTab;","import './Task.css'\nimport {AppModes} from \"./App\";\n\nfunction Task(props) {\n    return (\n        <li>\n        {props.appMode === AppModes.EDIT_MODE ?\n            <div className=\"listItem editInProgress\">\n                <label>\n                    <input\n                        className=\"checkbox\"\n                        type=\"checkbox\"\n                        checked={props.task.isChecked}\n                        disabled\n                    />\n                </label>\n                <label>\n                    <input\n                        className=\"editInput\"\n                        type=\"text\"\n                        value={props.task.taskName}\n                        onChange={(e) => props.onTaskChanged(props.task.id,'taskName',e.target.value)}\n                    />\n                </label>\n                <button\n                    className=\"deleteButton\"\n                    onClick={() => props.onTasksDeleted([props.task.id])}\n                >Delete</button>\n            </div>\n            :\n            <div className=\"listItem\">\n                <label>\n                    <input\n                        className = \"checkbox\"\n                        type=\"checkbox\"\n                        checked={props.task.isChecked}\n                        onChange={() => props.onTaskChanged(props.task.id, 'isChecked', !props.task.isChecked)}\n                    />\n                    <span>{props.task.taskName}</span>\n                </label>\n            </div>\n        }\n        </li>\n    )\n}\nexport default Task;","import './TaskList.css'\nimport Task from \"./Task\";\nimport {AppModes, TasksShowing} from \"./App\";\n\nfunction TaskList(props) {\n    let tasks = props.data?.filter(task =>\n        props.tasksShowing === TasksShowing.ALL ||\n        (props.tasksShowing === TasksShowing.UNCOMPLETED && !task.isChecked)\n    );\n    return <ul id=\"itemList\">\n        {tasks.length > 0 ?\n            tasks.map(task => {\n                    return <Task\n                        key={task.id}\n                        task={task}\n                        appMode={props.appMode}\n                        onTaskChanged={props.onTaskChanged}\n                        onTasksDeleted={props.onTasksDeleted}\n                    />\n                })\n            : <li key='1' id=\"noItems\">\n                <h3>{props.appMode===AppModes.EDIT_MODE ?\n                    'No tasks to edit.' :\n                    'You have completed all your tasks, woohoo!'}\n                </h3>\n            </li>\n        }\n    </ul>\n}\nexport default TaskList;","import './BottomTab.css'\nimport {AppModes, TasksShowing} from \"./App\";\nimport {useState} from \"react\";\n\nfunction BottomTab(props) {\n    const [idsToBeDeleted, setIDsToBeDeleted] = useState(null);\n\n    return <div id = \"footer\">\n            {props.appMode === AppModes.EDIT_MODE ?\n                    <div id=\"deleteButtonContainer\">\n                        {idsToBeDeleted === null ?\n                            <button\n                                type=\"button\"\n                                id=\"deleteCompleted\"\n                                disabled={props.data.length === 0}\n                                onClick={() => {\n                                    setIDsToBeDeleted(props.data.filter(task => task.isChecked).map(task => task.id));\n                                }\n                                }\n                            > Delete All Completed\n                            </button>\n                            :\n                            <button\n                                type=\"button\"\n                                id=\"cancel\"\n                                onClick={() => {\n                                    setIDsToBeDeleted(null);\n                                }\n                                }\n                            > Cancel\n                            </button>\n                        }\n                        {idsToBeDeleted === null ?\n                            <button\n                                type=\"button\"\n                                id=\"deleteAll\"\n                                disabled={props.data.length === 0}\n                                onClick={() => {\n                                    setIDsToBeDeleted(props.data.map(task => task.id));\n                                }\n                                }\n                            > Delete All\n                            </button>\n                            :\n                            <button\n                                type=\"button\"\n                                id=\"confirm\"\n                                onClick={() => {\n                                    props.onTasksDeleted(idsToBeDeleted);\n                                    setIDsToBeDeleted(null);\n                                }\n                                }\n                            > Confirm\n                            </button>\n                        }\n                    </div>\n                    :\n                    <div id=\"switcherContainer\">\n                        <button\n                            type=\"button\"\n                            id=\"showAll\"\n                            disabled={props.tasksShowing === TasksShowing.ALL}\n                            onClick={() => props.setTasksShowing(TasksShowing.ALL)}\n                        > All\n                        </button>\n                        <button\n                            type=\"button\"\n                            id=\"showUncompleted\"\n                            disabled={props.tasksShowing === TasksShowing.UNCOMPLETED}\n                            onClick={() => props.setTasksShowing(TasksShowing.UNCOMPLETED)}\n                        > Uncompleted\n                        </button>\n                    </div>\n            }\n            </div>\n}\nexport default BottomTab;","import './AddPopUp.css'\nimport {AppModes} from \"./App\";\nimport {useState} from \"react\";\n\nfunction AddPopUp(props) {\n    const [value, setValue] = useState('');\n\n    return (\n        <div id=\"createPopupBackground\" className={props.appMode===AppModes.ADD_MODE ? \"\" : \"hidden\"}>\n            <div id=\"createPopup\">\n                <div id=\"createHeader\">\n                    <button\n                        id=\"closeCreate\"\n                        onClick={() => {\n                            setValue('');\n                            props.setAppMode(AppModes.DEFAULT_MODE)\n                        }}\n                    >X</button>\n                    <h2> New Task </h2>\n                    <button>X</button>\n                </div>\n                <form id=\"createForm\">\n                    <input\n                        id=\"taskName\"\n                        type=\"text\"\n                        value = {value}\n                        onChange = {(e) => setValue(e.target.value)}/>\n                    <button id=\"addTask\"\n                            disabled={value.length === 0}\n                            onClick={(e) => {\n                                e.preventDefault();\n                                props.onItemAdded(value);\n                                setValue('');\n                                props.setAppMode(AppModes.DEFAULT_MODE);\n                            }}\n                    >Add Task</button>\n                </form>\n            </div>\n        </div>\n    )\n}\nexport default AddPopUp;","import './App.css';\nimport TopTab from \"./TopTab\";\nimport TaskList from \"./TaskList\";\nimport BottomTab from \"./BottomTab\";\nimport AddPopUp from \"./AddPopUp\";\nimport {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\n/* Effectively an enum to store the three possible modes of the app */\nexport const AppModes = {\n    ADD_MODE: \"add_mode\",\n    DEFAULT_MODE: \"default_mode\",\n    EDIT_MODE: \"edit_mode\",\n}\n\nexport const TasksShowing = {\n    ALL: \"all\",\n    UNCOMPLETED: \"uncompleted\",\n}\n\nfunction App(props) {\n    const [appMode, setAppMode] = useState(AppModes.DEFAULT_MODE);\n    const [tasksShowing, setTasksShowing] = useState(TasksShowing.ALL);\n\n    function onTaskChanged(taskID, field, newValue) {\n        props.setData(props.data.map(task => task.id === taskID ? {...task, [field]: newValue} : task))\n    }\n\n    function onTasksDeleted(taskIDs) {\n        props.setData(props.data.filter(task => !taskIDs.includes(task.id)));\n    }\n\n    function onTaskAdded(taskName) {\n        props.setData(props.data.concat([{\n            taskName: taskName,\n            id: generateUniqueID(),\n            isChecked: false,\n        }]));\n    }\n\n    return (\n        <div className=\"App\">\n          <AddPopUp\n              appMode={appMode}\n              setAppMode={setAppMode}\n              onItemAdded={onTaskAdded}\n          />\n          <TopTab\n              appMode={appMode}\n              setAppMode={setAppMode}\n              existsTasks={props.data.length > 0}\n          />\n          <TaskList\n              data={props.data}\n              appMode={appMode}\n              tasksShowing={tasksShowing}\n              onTaskChanged={onTaskChanged}\n              onTasksDeleted={onTasksDeleted}\n          />\n          <BottomTab\n              data={props.data}\n              appMode={appMode}\n              tasksShowing={tasksShowing}\n              setTasksShowing={setTasksShowing}\n              onTasksDeleted={onTasksDeleted}\n          />\n        </div>\n  );\n}\n\n\nexport default App;\n","import App from \"./App\";\nimport {useState} from \"react\";\n\nfunction InMemoryApp(props) {\n    const [data, setData] = useState(props.initialData);\n    return <App data={data} setData={setData}/>\n}\n\nexport default InMemoryApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport InMemoryApp from \"./InMemoryApp\";\n\nlet initialData = [\n    {id:1,taskName:'Buy eggs',isChecked: false},\n    {id:2,taskName:'Buy milk',isChecked: true},\n    {id:3,taskName:'Walk dog',isChecked: false},\n    {id:4,taskName:'Get haircut',isChecked: true},\n]\n\nReactDOM.render(\n  <React.StrictMode>\n    <InMemoryApp initialData={initialData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}