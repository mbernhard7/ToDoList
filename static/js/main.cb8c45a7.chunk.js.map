{"version":3,"sources":["reportWebVitals.js","TopTab.js","Task.js","TaskList.js","BottomTab.js","PopUp.js","App.js","InMemoryApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TopTab","props","id","appMode","AppModes","EDIT_MODE","onClick","setAppMode","DEFAULT_MODE","disabled","existsTasks","ADD_MODE","Task","className","type","checked","task","isChecked","onChange","onTaskChanged","taskName","TaskList","tasks","data","filter","tasksShowing","TasksShowing","ALL","UNCOMPLETED","length","map","BottomTab","setTasksShowing","PopUp","useState","value","setValue","e","target","preventDefault","onItemAdded","App","onTasksDeleted","taskIDs","setData","includes","concat","generateUniqueID","taskID","field","newValue","InMemoryApp","initialData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb8c45a7.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './TopTab.css'\nimport {AppModes} from \"./App\";\n\nfunction TopTab(props) {\n    return <div id=\"topTab\">\n        {\n            props.appMode === AppModes.EDIT_MODE ?\n            <button\n                id=\"saveEdits\"\n                onClick={() => props.setAppMode(AppModes.DEFAULT_MODE)}\n            >Done</button>\n            :<button\n                    id=\"editButton\"\n                    disabled={!props.existsTasks}\n                    onClick={() => props.setAppMode(AppModes.EDIT_MODE)}\n                >Edit</button>\n        }\n        <h1 id =\"title\">To-Do</h1>\n        <button id=\"addItem\"\n                disabled={props.appMode !== AppModes.DEFAULT_MODE}\n                onClick={() => props.setAppMode(AppModes.ADD_MODE)}\n        >+</button>\n    </div>\n}\nexport default TopTab;","import './Task.css'\n\nfunction Task(props) {\n    return <li className=\"listItem\">\n        <label>\n            <input\n                className = \"checkbox\"\n                type=\"checkbox\"\n                checked={props.task.isChecked}\n                onChange={() => props.onTaskChanged(props.task.id, 'isChecked', !props.task.isChecked)}\n            />\n            <span>{props.task.taskName}</span>\n        </label>\n    </li>\n}\nexport default Task;","import './TaskList.css'\nimport Task from \"./Task\";\nimport {TasksShowing} from \"./App\";\n\nfunction TaskList(props) {\n    let tasks = props.data?.filter(task =>\n        props.tasksShowing === TasksShowing.ALL ||\n        (props.tasksShowing === TasksShowing.UNCOMPLETED && !task.isChecked)\n    );\n    return <ul id=\"itemList\">\n        {tasks.length > 0 ?\n            tasks.map(task => {\n                    return <Task key={task.id} task={task} onTaskChanged={props.onTaskChanged}/>\n                })\n            : <li key='1' id=\"noItems\">\n                <h3>You have completed all your tasks, woohoo!</h3>\n            </li>\n        }\n    </ul>\n}\nexport default TaskList;","import './BottomTab.css'\nimport {AppModes, TasksShowing} from \"./App\";\n\nfunction BottomTab(props) {\n    return <div id = \"footer\">\n        {props.appMode === AppModes.EDIT_MODE ?\n            <div>\n                <button type=\"button\" id=\"deleteCompleted\"> Delete All Completed </button>\n                <button type=\"button\" id=\"deleteAll\"> Delete All </button>\n            </div>\n            :\n            <div id=\"switcherContainer\">\n                <button\n                    type = \"button\"\n                    id=\"showAll\"\n                    disabled={props.tasksShowing === TasksShowing.ALL}\n                    onClick={() => props.setTasksShowing(TasksShowing.ALL)}\n                > All </button>\n                <button\n                    type = \"button\"\n                    id=\"showUncompleted\"\n                    disabled={props.tasksShowing === TasksShowing.UNCOMPLETED}\n                    onClick={() => props.setTasksShowing(TasksShowing.UNCOMPLETED)}\n                > Uncompleted </button>\n            </div>\n        }\n    </div>;\n}\nexport default BottomTab;","import './PopUp.css'\nimport {AppModes} from \"./App\";\nimport {useState} from \"react\";\n\nfunction PopUp(props) {\n    const [value, setValue] = useState('');\n\n    return (\n        <div id=\"createPopupBackground\" className={props.appMode===AppModes.ADD_MODE ? \"\" : \"hidden\"}>\n            <div id=\"createPopup\">\n                <div id=\"createHeader\">\n                    <button\n                        id=\"closeCreate\"\n                        onClick={() => props.setAppMode(AppModes.DEFAULT_MODE)}\n                    >X</button>\n                    <h2> New Task </h2>\n                    <button>X</button>\n                </div>\n                <form id=\"createForm\">\n                    <input\n                        id=\"taskName\"\n                        type=\"text\"\n                        value = {value}\n                        onChange = {(e) => setValue(e.target.value)}/>\n                    <button id=\"addTask\"\n                            onClick={(e) => {\n                                e.preventDefault();\n                                props.onItemAdded(value);\n                                props.setAppMode(AppModes.DEFAULT_MODE)\n                            }}\n                    >Add Task</button>\n                </form>\n            </div>\n        </div>\n    )\n}\nexport default PopUp;","import './App.css';\nimport TopTab from \"./TopTab\";\nimport TaskList from \"./TaskList\";\nimport BottomTab from \"./BottomTab\";\nimport PopUp from \"./PopUp\";\nimport {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\n/* Effectively an enum to store the three possible modes of the app */\nexport const AppModes = {\n    DEFAULT_MODE: \"default_mode\",\n    ADD_MODE: \"add_mode\",\n    EDIT_MODE: \"edit_mode\",\n}\n\nexport const TasksShowing = {\n    ALL: \"all\",\n    UNCOMPLETED: \"uncompleted\",\n}\n\nfunction App(props) {\n    const [appMode, setAppMode] = useState(AppModes.DEFAULT_MODE);\n    const [tasksShowing, setTasksShowing] = useState(TasksShowing.ALL);\n\n    function onTaskChanged(taskID, field, newValue) {\n        props.setData(props.data.map(task => task.id === taskID ? {...task, [field]: newValue} : task))\n    }\n\n    function onTasksDeleted(taskIDs) {\n        props.setData(props.data.filter(task => !taskIDs.includes(task.id)));\n    }\n\n    function onTaskAdded(taskName) {\n        props.setData(props.data.concat([{\n            taskName: taskName,\n            id: generateUniqueID(),\n            isChecked: false,\n        }]));\n    }\n\n    return (\n        <div className=\"App\">\n          <PopUp\n              appMode={appMode}\n              setAppMode={setAppMode}\n              onItemAdded={onTaskAdded}\n          />\n          <TopTab\n              appMode={appMode}\n              setAppMode={setAppMode}\n              existsTasks={props.data.length > 0}\n          />\n          <TaskList\n              data={props.data}\n              tasksShowing={tasksShowing}\n              onTaskChanged={onTaskChanged}\n              onTasksDeleted={onTasksDeleted}\n          />\n          <BottomTab\n              appMode={appMode}\n              tasksShowing={tasksShowing}\n              setTasksShowing={setTasksShowing}\n              onTasksDeleted={onTasksDeleted}\n          />\n        </div>\n  );\n}\n\n\nexport default App;\n","import App from \"./App\";\nimport {useState} from \"react\";\n\nfunction InMemoryApp(props) {\n    const [data, setData] = useState(props.initialData);\n    return <App data={data} setData={setData}/>\n}\n\nexport default InMemoryApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport InMemoryApp from \"./InMemoryApp\";\n\nlet initialData = [{taskName: 'Call Mom', isChecked: true, id: 1}]\n\nReactDOM.render(\n  <React.StrictMode>\n    <InMemoryApp initialData={initialData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}