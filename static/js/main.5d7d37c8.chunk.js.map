{"version":3,"sources":["TopTab.js","Task.js","TaskList.js","BottomTab.js","AddPopUp.js","App.js","InMemoryApp.js","index.js"],"names":["TopTab","props","id","appMode","AppModes","EDIT_MODE","onClick","setAppMode","DEFAULT_MODE","disabled","existsTasks","ADD_MODE","Task","className","type","checked","task","isChecked","onChange","e","onTaskChanged","target","taskName","value","onTasksDeleted","TaskList","tasks","data","filter","tasksShowing","TasksShowing","ALL","UNCOMPLETED","length","map","BottomTab","useState","deleteSelected","setDeleteSelected","deleteContainer","switcherContainer","setTasksShowing","AddPopUp","setTaskName","onItemAdded","App","onTaskAdded","InMemoryApp","initialData","setData","concat","generateUniqueID","taskID","field","newValue","taskIDs","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d7d37c8.chunk.js","sourcesContent":["import './TopTab.css'\nimport {AppModes} from \"./App\";\n\nfunction TopTab(props) {\n    return <div id=\"topTab\">\n        {\n            props.appMode === AppModes.EDIT_MODE ?\n                <button\n                    id=\"saveEdits\"\n                    onClick={() => props.setAppMode(AppModes.DEFAULT_MODE)}\n                >Done</button>\n                : <button\n                    id=\"editButton\"\n                    disabled={!props.existsTasks}\n                    onClick={() => props.setAppMode(AppModes.EDIT_MODE)}\n                >Edit</button>\n        }\n        <h1 id=\"title\">To-Do</h1>\n        <button id=\"addItem\"\n                disabled={props.appMode !== AppModes.DEFAULT_MODE}\n                onClick={() => props.setAppMode(AppModes.ADD_MODE)}\n        >+\n        </button>\n    </div>\n}\n\nexport default TopTab;","import './Task.css'\nimport {AppModes} from \"./App\";\n\nfunction Task(props) {\n    return (\n        <li className={props.appMode === AppModes.EDIT_MODE ? \"listItem editInProgress\" : \"listItem\"}>\n            <label>\n                <input\n                    className=\"checkbox\"\n                    type=\"checkbox\"\n                    checked={props.task.isChecked}\n                    disabled={props.appMode === AppModes.EDIT_MODE}\n                    onChange={(e) => props.onTaskChanged(props.task.id, 'isChecked', e.target.checked)}\n                />\n                {props.appMode !== AppModes.EDIT_MODE && <span>{props.task.taskName}</span>}\n            </label>\n            {props.appMode === AppModes.EDIT_MODE &&\n            <>\n                <label>\n                    <input\n                        className=\"editInput\"\n                        type=\"text\"\n                        value={props.task.taskName}\n                        onChange={(e) => props.onTaskChanged(props.task.id, 'taskName', e.target.value)}\n                    />\n                </label>\n                <button\n                    className=\"deleteButton\"\n                    onClick={() => props.onTasksDeleted([props.task.id])}\n                >Delete\n                </button>\n            </>\n            }\n        </li>\n    )\n}\n\nexport default Task;","import './TaskList.css'\nimport Task from \"./Task\";\nimport {AppModes, TasksShowing} from \"./App\";\n\nfunction TaskList(props) {\n    let tasks = props.data?.filter(task =>\n        props.tasksShowing === TasksShowing.ALL ||\n        (props.tasksShowing === TasksShowing.UNCOMPLETED && !task.isChecked)\n    );\n    return <ul id=\"itemList\">\n        {tasks.length > 0 ?\n            tasks.map(task => {\n                return <Task\n                    key={task.id}\n                    task={task}\n                    appMode={props.appMode}\n                    onTaskChanged={props.onTaskChanged}\n                    onTasksDeleted={props.onTasksDeleted}\n                />\n            })\n            : <li key='1' id=\"noItems\">\n                <h3>{props.appMode === AppModes.EDIT_MODE ?\n                    'No tasks to edit.' :\n                    'You have completed all your tasks, woohoo!'}\n                </h3>\n            </li>\n        }\n    </ul>\n}\n\nexport default TaskList;","import './BottomTab.css'\nimport {AppModes, TasksShowing} from \"./App\";\nimport {useState} from \"react\";\n\nfunction BottomTab(props) {\n    const [deleteSelected, setDeleteSelected] = useState(null);\n    const deleteContainer = (\n        <div id=\"deleteButtonContainer\">\n            {deleteSelected === null ?\n                <button\n                    type=\"button\"\n                    id=\"deleteCompleted\"\n                    disabled={props.data.filter(task => task.isChecked).length === 0}\n                    onClick={() => setDeleteSelected('completed')}\n                > Delete All Completed\n                </button>\n                :\n                <button\n                    type=\"button\"\n                    id=\"cancel\"\n                    onClick={() => setDeleteSelected(null)}\n                > Cancel\n                </button>\n            }\n            {deleteSelected === null ?\n                <button\n                    type=\"button\"\n                    id=\"deleteAll\"\n                    disabled={props.data.length === 0}\n                    onClick={() => {\n                        setDeleteSelected('all');\n                    }\n                    }\n                > Delete All\n                </button>\n                :\n                <button\n                    type=\"button\"\n                    id=\"confirm\"\n                    onClick={() => {\n                        props.onTasksDeleted(deleteSelected === 'all' ?\n                            props.data.map(task => task.id)\n                            : props.data.filter(task => task.isChecked).map(task => task.id)\n                        );\n                        setDeleteSelected(null);\n                    }\n                    }\n                > Permanently delete {deleteSelected} tasks\n                </button>\n            }\n        </div>\n    )\n\n    const switcherContainer = (\n        <div id=\"switcherContainer\">\n            <button\n                type=\"button\"\n                id=\"showAll\"\n                disabled={props.tasksShowing === TasksShowing.ALL}\n                onClick={() => props.setTasksShowing(TasksShowing.ALL)}\n            > All\n            </button>\n            <button\n                type=\"button\"\n                id=\"showUncompleted\"\n                disabled={props.tasksShowing === TasksShowing.UNCOMPLETED}\n                onClick={() => props.setTasksShowing(TasksShowing.UNCOMPLETED)}\n            > Uncompleted\n            </button>\n        </div>\n    )\n    return (\n        <div id=\"footer\">\n            {props.appMode === AppModes.EDIT_MODE ? deleteContainer : switcherContainer}\n        </div>\n    )\n}\n\nexport default BottomTab;","import './AddPopUp.css'\nimport {AppModes} from \"./App\";\nimport {useState} from \"react\";\n\nfunction AddPopUp(props) {\n    const [taskName, setTaskName] = useState('');\n\n    return (\n        <div id=\"createPopupBackground\" className={props.appMode === AppModes.ADD_MODE ? \"\" : \"hidden\"}>\n            <div id=\"createPopup\">\n                <div id=\"createHeader\">\n                    <button\n                        id=\"closeCreate\"\n                        onClick={() => {\n                            setTaskName('');\n                            props.setAppMode(AppModes.DEFAULT_MODE)\n                        }}\n                    >X\n                    </button>\n                    <h2> New Task </h2>\n                    <button>X</button>\n                </div>\n                <form id=\"createForm\">\n                    <input\n                        id=\"taskName\"\n                        type=\"text\"\n                        value={taskName}\n                        onChange={(e) => setTaskName(e.target.value)}/>\n                    <button id=\"addTask\"\n                            type=\"button\"\n                            disabled={taskName.length === 0}\n                            onClick={() => {\n                                props.onItemAdded(taskName);\n                                setTaskName('');\n                                props.setAppMode(AppModes.DEFAULT_MODE);\n                            }}\n                    >Add Task\n                    </button>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default AddPopUp;\n","import './App.css';\nimport TopTab from \"./TopTab\";\nimport TaskList from \"./TaskList\";\nimport BottomTab from \"./BottomTab\";\nimport AddPopUp from \"./AddPopUp\";\nimport {useState} from \"react\";\n\n/* Effectively an enum to store the three possible modes of the app */\nexport const AppModes = {\n    ADD_MODE: \"add_mode\",\n    DEFAULT_MODE: \"default_mode\",\n    EDIT_MODE: \"edit_mode\",\n}\n\nexport const TasksShowing = {\n    ALL: \"all\",\n    UNCOMPLETED: \"uncompleted\",\n}\n\nfunction App(props) {\n    const [appMode, setAppMode] = useState(AppModes.DEFAULT_MODE);\n    const [tasksShowing, setTasksShowing] = useState(TasksShowing.ALL);\n\n    return (\n        <div className=\"App\">\n            <AddPopUp\n                appMode={appMode}\n                setAppMode={setAppMode}\n                onItemAdded={props.onTaskAdded}\n            />\n            <TopTab\n                appMode={appMode}\n                setAppMode={setAppMode}\n                existsTasks={props.data.length > 0}\n            />\n            <TaskList\n                data={props.data}\n                appMode={appMode}\n                tasksShowing={tasksShowing}\n                onTaskChanged={props.onTaskChanged}\n                onTasksDeleted={props.onTasksDeleted}\n            />\n            <BottomTab\n                data={props.data}\n                appMode={appMode}\n                tasksShowing={tasksShowing}\n                setTasksShowing={setTasksShowing}\n                onTasksDeleted={props.onTasksDeleted}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import App from \"./App\";\nimport {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nfunction InMemoryApp(props) {\n    const [data, setData] = useState(props.initialData);\n\n    function onTaskAdded(taskName) {\n        setData(data.concat([{\n            taskName: taskName,\n            id: generateUniqueID(),\n            isChecked: false,\n        }]));\n    }\n\n    function onTaskChanged(taskID, field, newValue) {\n        setData(data.map(task => task.id === taskID ? {...task, [field]: newValue} : task))\n    }\n\n    function onTasksDeleted(taskIDs) {\n        setData(data.filter(task => !taskIDs.includes(task.id)));\n    }\n\n    return <App data={data} onTaskAdded={onTaskAdded} onTaskChanged={onTaskChanged} onTasksDeleted={onTasksDeleted}/>\n}\n\nexport default InMemoryApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport InMemoryApp from \"./InMemoryApp\";\n\nlet initialData = [\n    {id: 1, taskName: 'Buy eggs', isChecked: false},\n    {id: 2, taskName: 'Buy milk', isChecked: true},\n    {id: 3, taskName: 'Walk dog', isChecked: false},\n    {id: 4, taskName: 'Get haircut', isChecked: true},\n]\n\nReactDOM.render(\n    <React.StrictMode>\n        <InMemoryApp initialData={initialData}/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}